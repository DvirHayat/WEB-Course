{"ast":null,"code":"var _jsxFileName = \"C:\\\\WebCourse\\\\WEB-Course\\\\HW2\\\\frontEnd\\\\src\\\\components\\\\homePage\\\\GraphComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { DataSet, Network } from 'vis-network/standalone';\nimport { getGraphOptions, getEdgeColor } from './Utilities';\nimport FilterButtons from './FilterButtons';\nimport Legend from './Legend';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [filter, setFilter] = useState('all');\n  useEffect(() => {\n    const userData = getUsers();\n    setUsers(userData);\n  }, []);\n  useEffect(() => {\n    const renderGraph = (users, filter) => {\n      const container = document.getElementById('network-graph');\n      if (!container) return;\n      container.classList.add('border-2', 'border-black');\n      const canvas = container.getElementsByTagName('canvas')[0];\n      if (canvas) {\n        canvas.style.height = '800px';\n      }\n      const me = {\n        id_num: '000000000',\n        firstName: 'Me',\n        lastName: '',\n        workplace: 'Tech Company Inc.',\n        hobby: 'Reading',\n        state: 'New York'\n      };\n      const classifyUsers = users => {\n        const commonHobby = [];\n        const commonState = [];\n        const commonWorkplace = [];\n        users.forEach(user => {\n          if (user.hobby === me.hobby) commonHobby.push(user);\n          if (user.state === me.state) commonState.push(user);\n          if (user.workplace === me.workplace) commonWorkplace.push(user);\n        });\n        return {\n          commonHobby,\n          commonState,\n          commonWorkplace\n        };\n      };\n      const {\n        commonHobby,\n        commonState,\n        commonWorkplace\n      } = classifyUsers(users);\n      const nodes = new DataSet([...users.map(user => ({\n        id: user.id_num,\n        label: `${user.firstName} ${user.lastName}`\n      })), {\n        id: me.id_num,\n        label: 'Me',\n        color: {\n          background: 'red',\n          border: 'black'\n        },\n        size: 30\n      }]);\n      const edges = new DataSet();\n      const addEdges = (users, color) => {\n        const ids = users.map(user => user.id_num);\n        ids.forEach((id1, idx1) => {\n          ids.slice(idx1 + 1).forEach(id2 => {\n            edges.add({\n              from: id1,\n              to: id2,\n              color: {\n                color,\n                inherit: false,\n                opacity: 1.0\n              }\n            });\n          });\n        });\n      };\n      const addEdgesToMe = (users, color) => {\n        users.forEach(user => {\n          edges.add({\n            from: me.id_num,\n            to: user.id_num,\n            color: {\n              color,\n              inherit: false,\n              opacity: 1.0\n            }\n          });\n        });\n      };\n      if (filter === 'all') {\n        // Add all edges\n        addEdges(commonHobby, getEdgeColor('hobby'));\n        addEdges(commonState, getEdgeColor('state'));\n        addEdges(commonWorkplace, getEdgeColor('workplace'));\n\n        // Connect \"Me\" to all common attributes\n        addEdgesToMe(commonHobby, getEdgeColor('hobby'));\n        addEdgesToMe(commonState, getEdgeColor('state'));\n        addEdgesToMe(commonWorkplace, getEdgeColor('workplace'));\n      } else {\n        if (filter === 'hobby') {\n          addEdgesToMe(commonHobby, getEdgeColor('hobby'));\n          addEdges(commonState.filter(user => !commonHobby.includes(user)), getEdgeColor('state'));\n          addEdges(commonWorkplace.filter(user => !commonHobby.includes(user)), getEdgeColor('workplace'));\n        } else if (filter === 'state') {\n          addEdgesToMe(commonState, getEdgeColor('state'));\n          addEdges(commonHobby.filter(user => !commonState.includes(user)), getEdgeColor('hobby'));\n          addEdges(commonWorkplace.filter(user => !commonState.includes(user)), getEdgeColor('workplace'));\n        } else if (filter === 'workplace') {\n          addEdgesToMe(commonWorkplace, getEdgeColor('workplace'));\n          addEdges(commonHobby.filter(user => !commonWorkplace.includes(user)), getEdgeColor('hobby'));\n          addEdges(commonState.filter(user => !commonWorkplace.includes(user)), getEdgeColor('state'));\n        }\n      }\n      const data = {\n        nodes,\n        edges\n      };\n      const options = getGraphOptions();\n      new Network(container, data, options);\n    };\n    renderGraph(users, filter);\n  }, [users, filter]);\n  const getUsers = () => [{\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"birthday\": \"1990-01-01\",\n    \"workplace\": \"Tech Company Inc.\",\n    \"email\": \"john.doe@example.com\",\n    \"country\": \"United States\",\n    \"city\": \"New York\",\n    \"state\": \"New York\",\n    \"gender\": \"Male\",\n    \"id_num\": \"123456789\",\n    \"hobby\": \"Reading\"\n  }, {\n    \"firstName\": \"Jane\",\n    \"lastName\": \"Smith\",\n    \"birthday\": \"1985-05-15\",\n    \"workplace\": \"Health Corp\",\n    \"email\": \"jane.smith@example.com\",\n    \"country\": \"Canada\",\n    \"city\": \"Toronto\",\n    \"state\": \"Ontario\",\n    \"gender\": \"Female\",\n    \"id_num\": \"987654321\",\n    \"hobby\": \"Hiking\"\n  }\n  // Add more user data here\n  ];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FilterButtons, {\n      setFilter: setFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"network-graph\",\n      className: \"w-full h-800 border-4 border-black\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphComponent, \"3lUk1T4eQr/j1P/EyG1/+CPoNek=\");\n_c = GraphComponent;\nexport default GraphComponent;\nvar _c;\n$RefreshReg$(_c, \"GraphComponent\");","map":{"version":3,"names":["React","useEffect","useState","DataSet","Network","getGraphOptions","getEdgeColor","FilterButtons","Legend","jsxDEV","_jsxDEV","GraphComponent","_s","users","setUsers","filter","setFilter","userData","getUsers","renderGraph","container","document","getElementById","classList","add","canvas","getElementsByTagName","style","height","me","id_num","firstName","lastName","workplace","hobby","state","classifyUsers","commonHobby","commonState","commonWorkplace","forEach","user","push","nodes","map","id","label","color","background","border","size","edges","addEdges","ids","id1","idx1","slice","id2","from","to","inherit","opacity","addEdgesToMe","includes","data","options","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/WebCourse/WEB-Course/HW2/frontEnd/src/components/homePage/GraphComponent.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { DataSet, Network } from 'vis-network/standalone';\r\nimport { getGraphOptions, getEdgeColor } from './Utilities';\r\nimport FilterButtons from './FilterButtons';\r\nimport Legend from './Legend';\r\n\r\nconst GraphComponent = () => {\r\n  const [users, setUsers] = useState([]);\r\n  const [filter, setFilter] = useState('all');\r\n\r\n  useEffect(() => {\r\n    const userData = getUsers();\r\n    setUsers(userData);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const renderGraph = (users, filter) => {\r\n      const container = document.getElementById('network-graph');\r\n      if (!container) return;\r\n\r\n      container.classList.add('border-2', 'border-black');\r\n      const canvas = container.getElementsByTagName('canvas')[0];\r\n      if (canvas) {\r\n        canvas.style.height = '800px';\r\n      }\r\n\r\n      const me = {\r\n        id_num: '000000000',\r\n        firstName: 'Me',\r\n        lastName: '',\r\n        workplace: 'Tech Company Inc.',\r\n        hobby: 'Reading',\r\n        state: 'New York'\r\n      };\r\n\r\n      const classifyUsers = (users) => {\r\n        const commonHobby = [];\r\n        const commonState = [];\r\n        const commonWorkplace = [];\r\n\r\n        users.forEach(user => {\r\n          if (user.hobby === me.hobby) commonHobby.push(user);\r\n          if (user.state === me.state) commonState.push(user);\r\n          if (user.workplace === me.workplace) commonWorkplace.push(user);\r\n        });\r\n\r\n        return { commonHobby, commonState, commonWorkplace };\r\n      };\r\n\r\n      const { commonHobby, commonState, commonWorkplace } = classifyUsers(users);\r\n\r\n      const nodes = new DataSet([\r\n        ...users.map(user => ({\r\n          id: user.id_num,\r\n          label: `${user.firstName} ${user.lastName}`\r\n        })),\r\n        { id: me.id_num, label: 'Me', color: { background: 'red', border: 'black' }, size: 30 }\r\n      ]);\r\n\r\n      const edges = new DataSet();\r\n\r\n      const addEdges = (users, color) => {\r\n        const ids = users.map(user => user.id_num);\r\n        ids.forEach((id1, idx1) => {\r\n          ids.slice(idx1 + 1).forEach(id2 => {\r\n            edges.add({ from: id1, to: id2, color: { color, inherit: false, opacity: 1.0 } });\r\n          });\r\n        });\r\n      };\r\n\r\n      const addEdgesToMe = (users, color) => {\r\n        users.forEach(user => {\r\n          edges.add({ from: me.id_num, to: user.id_num, color: { color, inherit: false, opacity: 1.0 } });\r\n        });\r\n      };\r\n\r\n      if (filter === 'all') {\r\n        // Add all edges\r\n        addEdges(commonHobby, getEdgeColor('hobby'));\r\n        addEdges(commonState, getEdgeColor('state'));\r\n        addEdges(commonWorkplace, getEdgeColor('workplace'));\r\n\r\n        // Connect \"Me\" to all common attributes\r\n        addEdgesToMe(commonHobby, getEdgeColor('hobby'));\r\n        addEdgesToMe(commonState, getEdgeColor('state'));\r\n        addEdgesToMe(commonWorkplace, getEdgeColor('workplace'));\r\n      } else {\r\n        if (filter === 'hobby') {\r\n          addEdgesToMe(commonHobby, getEdgeColor('hobby'));\r\n          addEdges(commonState.filter(user => !commonHobby.includes(user)), getEdgeColor('state'));\r\n          addEdges(commonWorkplace.filter(user => !commonHobby.includes(user)), getEdgeColor('workplace'));\r\n        } else if (filter === 'state') {\r\n          addEdgesToMe(commonState, getEdgeColor('state'));\r\n          addEdges(commonHobby.filter(user => !commonState.includes(user)), getEdgeColor('hobby'));\r\n          addEdges(commonWorkplace.filter(user => !commonState.includes(user)), getEdgeColor('workplace'));\r\n        } else if (filter === 'workplace') {\r\n          addEdgesToMe(commonWorkplace, getEdgeColor('workplace'));\r\n          addEdges(commonHobby.filter(user => !commonWorkplace.includes(user)), getEdgeColor('hobby'));\r\n          addEdges(commonState.filter(user => !commonWorkplace.includes(user)), getEdgeColor('state'));\r\n        }\r\n      }\r\n\r\n      const data = { nodes, edges };\r\n      const options = getGraphOptions();\r\n      new Network(container, data, options);\r\n    };\r\n\r\n    renderGraph(users, filter);\r\n  }, [users, filter]);\r\n\r\n  const getUsers = () => [\r\n    {\r\n      \"firstName\": \"John\",\r\n      \"lastName\": \"Doe\",\r\n      \"birthday\": \"1990-01-01\",\r\n      \"workplace\": \"Tech Company Inc.\",\r\n      \"email\": \"john.doe@example.com\",\r\n      \"country\": \"United States\",\r\n      \"city\": \"New York\",\r\n      \"state\": \"New York\",\r\n      \"gender\": \"Male\",\r\n      \"id_num\": \"123456789\",\r\n      \"hobby\": \"Reading\"\r\n    },\r\n    {\r\n      \"firstName\": \"Jane\",\r\n      \"lastName\": \"Smith\",\r\n      \"birthday\": \"1985-05-15\",\r\n      \"workplace\": \"Health Corp\",\r\n      \"email\": \"jane.smith@example.com\",\r\n      \"country\": \"Canada\",\r\n      \"city\": \"Toronto\",\r\n      \"state\": \"Ontario\",\r\n      \"gender\": \"Female\",\r\n      \"id_num\": \"987654321\",\r\n      \"hobby\": \"Hiking\"\r\n    },\r\n    // Add more user data here\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <FilterButtons setFilter={setFilter} />\r\n      <div id=\"network-graph\" className=\"w-full h-800 border-4 border-black\"></div>\r\n      <Legend />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}