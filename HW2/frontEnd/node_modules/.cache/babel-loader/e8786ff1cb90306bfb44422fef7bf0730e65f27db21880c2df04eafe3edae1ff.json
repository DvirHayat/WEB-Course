{"ast":null,"code":"var _jsxFileName = \"C:\\\\WebCourse\\\\WEB-Course\\\\HW2\\\\frontEnd\\\\src\\\\components\\\\homePage\\\\GraphComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { DataSet, Network } from 'vis-network/standalone';\nimport { getGraphOptions, getEdgeColor, getMe, getUsers } from './Utilities';\nimport FilterButtons from './FilterButtons';\nimport Legend from './Legend';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [filter, setFilter] = useState('all');\n  const [me, setMe] = useState(null);\n  useEffect(() => {\n    const userData = getUsers();\n    setUsers(userData);\n  }, []);\n  useEffect(() => {\n    const meData = getMe();\n    setMe(meData);\n  }, []);\n  useEffect(() => {\n    if (!me) return;\n    const renderGraph = (users, filter) => {\n      const container = document.getElementById('network-graph');\n      if (!container) return;\n      container.classList.add('border-2', 'border-black');\n      const canvas = container.getElementsByTagName('canvas')[0];\n      if (canvas) {\n        canvas.style.height = '800px';\n      }\n      const classifyUsers = users => {\n        const commonAttributes = [{\n          attribute: 'hobby',\n          users: []\n        }, {\n          attribute: 'state',\n          users: []\n        }, {\n          attribute: 'workplace',\n          users: []\n        }];\n        users.forEach(user => {\n          commonAttributes.forEach(attr => {\n            if (user[attr.attribute] === me[attr.attribute]) {\n              attr.users.push(user);\n            }\n          });\n        });\n        return commonAttributes;\n      };\n      const commonAttributes = classifyUsers(users);\n      const nodes = new DataSet([...users.map(user => ({\n        id: user.id_num,\n        label: `${user.firstName} ${user.lastName}`\n      })), {\n        id: me.id_num,\n        label: 'Me',\n        color: {\n          background: 'red',\n          border: 'black'\n        },\n        size: 30\n      }]);\n      const edges = new DataSet();\n      const connectEdge = (user1, user2, color, smoothType) => {\n        edges.add({\n          from: user1.id_num,\n          to: user2.id_num,\n          color: {\n            color,\n            inherit: false,\n            opacity: 2\n          },\n          smooth: {\n            type: smoothType,\n            roundness: 0.2\n          }\n        });\n      };\n      const addEdgeToMe = (user, color, smoothType) => {\n        connectEdge(me, user, color, smoothType);\n      };\n      const addEdgesToMe = (users, color) => {\n        users.forEach((user, index) => {\n          const smoothType = index % 2 === 0 ? 'curvedCW' : 'curvedCCW';\n          addEdgeToMe(user, color, smoothType);\n          console.log(`${user.firstName} ${user.lastName} connected to me with color ${color}`);\n        });\n      };\n      if (filter === 'all') {\n        commonAttributes.forEach(attr => {\n          addEdgesToMe(attr.users, getEdgeColor(attr.attribute));\n        });\n      } else {\n        const filteredAttr = commonAttributes.find(attr => attr.attribute === filter);\n        if (filteredAttr) {\n          addEdgesToMe(filteredAttr.users, getEdgeColor(filteredAttr.attribute));\n        }\n      }\n      const data = {\n        nodes,\n        edges\n      };\n      const options = getGraphOptions();\n      new Network(container, data, options);\n    };\n    renderGraph(users, filter);\n  }, [users, filter, me]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FilterButtons, {\n      setFilter: setFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"network-graph\",\n      className: \"w-full h-800 border-4 border-black\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphComponent, \"qim/1BZ81WCp2Z3LFCBIORfAfb0=\");\n_c = GraphComponent;\nexport default GraphComponent;\nvar _c;\n$RefreshReg$(_c, \"GraphComponent\");","map":{"version":3,"names":["React","useEffect","useState","DataSet","Network","getGraphOptions","getEdgeColor","getMe","getUsers","FilterButtons","Legend","jsxDEV","_jsxDEV","GraphComponent","_s","users","setUsers","filter","setFilter","me","setMe","userData","meData","renderGraph","container","document","getElementById","classList","add","canvas","getElementsByTagName","style","height","classifyUsers","commonAttributes","attribute","forEach","user","attr","push","nodes","map","id","id_num","label","firstName","lastName","color","background","border","size","edges","connectEdge","user1","user2","smoothType","from","to","inherit","opacity","smooth","type","roundness","addEdgeToMe","addEdgesToMe","index","console","log","filteredAttr","find","data","options","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/WebCourse/WEB-Course/HW2/frontEnd/src/components/homePage/GraphComponent.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { DataSet, Network } from 'vis-network/standalone';\r\nimport { getGraphOptions, getEdgeColor, getMe, getUsers } from './Utilities';\r\nimport FilterButtons from './FilterButtons';\r\nimport Legend from './Legend';\r\n\r\nconst GraphComponent = () => {\r\n  const [users, setUsers] = useState([]);\r\n  const [filter, setFilter] = useState('all');\r\n  const [me, setMe] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const userData = getUsers();\r\n    setUsers(userData);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const meData = getMe();\r\n    setMe(meData);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!me) return;\r\n\r\n    const renderGraph = (users, filter) => {\r\n      const container = document.getElementById('network-graph');\r\n      if (!container) return;\r\n\r\n      container.classList.add('border-2', 'border-black');\r\n      const canvas = container.getElementsByTagName('canvas')[0];\r\n      if (canvas) {\r\n        canvas.style.height = '800px';\r\n      }\r\n\r\n      const classifyUsers = (users) => {\r\n        const commonAttributes = [\r\n          { attribute: 'hobby', users: [] },\r\n          { attribute: 'state', users: [] },\r\n          { attribute: 'workplace', users: [] },\r\n        ];\r\n\r\n        users.forEach(user => {\r\n          commonAttributes.forEach(attr => {\r\n            if (user[attr.attribute] === me[attr.attribute]) {\r\n              attr.users.push(user);\r\n            }\r\n          });\r\n        });\r\n\r\n        return commonAttributes;\r\n      };\r\n\r\n      const commonAttributes = classifyUsers(users);\r\n\r\n      const nodes = new DataSet([\r\n        ...users.map(user => ({\r\n          id: user.id_num,\r\n          label: `${user.firstName} ${user.lastName}`\r\n        })),\r\n        { id: me.id_num, label: 'Me', color: { background: 'red', border: 'black' }, size: 30 }\r\n      ]);\r\n\r\n      const edges = new DataSet();\r\n\r\n      const connectEdge = (user1, user2, color, smoothType) => {\r\n        edges.add({\r\n          from: user1.id_num,\r\n          to: user2.id_num,\r\n          color: { color, inherit: false, opacity: 2 },\r\n          smooth: { type: smoothType, roundness: 0.2 }\r\n        });\r\n      };\r\n\r\n      const addEdgeToMe = (user, color, smoothType) => {\r\n        connectEdge(me, user, color, smoothType);\r\n      };\r\n\r\n      const addEdgesToMe = (users, color) => {\r\n        users.forEach((user, index) => {\r\n          const smoothType = index % 2 === 0 ? 'curvedCW' : 'curvedCCW';\r\n          addEdgeToMe(user, color, smoothType);\r\n          console.log(`${user.firstName} ${user.lastName} connected to me with color ${color}`);\r\n        });\r\n      };\r\n\r\n      if (filter === 'all') {\r\n        commonAttributes.forEach(attr => {\r\n          addEdgesToMe(attr.users, getEdgeColor(attr.attribute));\r\n        });\r\n      } else {\r\n        const filteredAttr = commonAttributes.find(attr => attr.attribute === filter);\r\n        if (filteredAttr) {\r\n          addEdgesToMe(filteredAttr.users, getEdgeColor(filteredAttr.attribute));\r\n        }\r\n      }\r\n\r\n      const data = { nodes, edges };\r\n      const options = getGraphOptions();\r\n      new Network(container, data, options);\r\n    };\r\n\r\n    renderGraph(users, filter);\r\n  }, [users, filter, me]);\r\n\r\n  return (\r\n    <div>\r\n      <FilterButtons setFilter={setFilter} />\r\n      <div id=\"network-graph\" className=\"w-full h-800 border-4 border-black\"></div>\r\n      <Legend />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}