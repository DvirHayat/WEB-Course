{"ast":null,"code":"var _jsxFileName = \"C:\\\\WebCourse\\\\WEB-Course\\\\HW2\\\\frontEnd\\\\src\\\\components\\\\homePage\\\\GraphComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { DataSet, Network } from 'vis-network/standalone';\nimport { getGraphOptions, getEdgeColor, getMe, getUsers } from './Utilities';\nimport FilterButtons from './FilterButtons';\nimport Legend from './Legend';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [filter, setFilter] = useState('all');\n  useEffect(() => {\n    const userData = getUsers();\n    setUsers(userData);\n  }, []);\n  useEffect(() => {\n    const renderGraph = (users, filter) => {\n      const container = document.getElementById('network-graph');\n      if (!container) return;\n      container.classList.add('border-2', 'border-black');\n      const canvas = container.getElementsByTagName('canvas')[0];\n      if (canvas) {\n        canvas.style.height = '800px';\n      }\n      const me = getMe();\n      const classifyUsers = users => {\n        const commonHobby = [];\n        const commonState = [];\n        const commonWorkplace = [];\n        users.forEach(user => {\n          if (user.hobby === me.hobby) commonHobby.push(user);\n          if (user.state === me.state) commonState.push(user);\n          if (user.workplace === me.workplace) commonWorkplace.push(user);\n        });\n        return {\n          commonHobby,\n          commonState,\n          commonWorkplace\n        };\n      };\n      const {\n        commonHobby,\n        commonState,\n        commonWorkplace\n      } = classifyUsers(users);\n\n      // Create nodes from the users.\n      const nodes = new DataSet([...users.map(user => ({\n        id: user.id_num,\n        label: `${user.firstName} ${user.lastName}`\n      })), {\n        id: me.id_num,\n        label: 'Me',\n        color: {\n          background: 'red',\n          border: 'black'\n        },\n        size: 30\n      } // Add Me as node.\n      ]);\n      const edges = new DataSet();\n      const connectEdge = (user1, user2, color) => {\n        edges.add({\n          from: user1.id_num,\n          to: user2.id_num,\n          color: {\n            color,\n            inherit: false,\n            opacity: 1.5\n          }\n        });\n      };\n      const addEdgeToMe = (user, color) => {\n        connectEdge(me, user, color);\n      };\n      const addEdgesToMe = (users, color) => {\n        users.forEach(user => {\n          addEdgeToMe(user, color);\n        });\n      };\n      if (filter === 'all') {\n        console.log(commonHobby);\n        console.log(commonState);\n        console.log(commonWorkplace);\n        console.log(edges);\n        // Connect \"Me\" to all common attributes\n        addEdgesToMe(commonHobby, getEdgeColor('hobby'));\n        addEdgesToMe(commonState, getEdgeColor('state'));\n        addEdgesToMe(commonWorkplace, getEdgeColor('workplace'));\n      } else {\n        if (filter === 'hobby') {\n          addEdgesToMe(commonHobby, getEdgeColor('hobby'));\n          // addEdges(commonState.filter(user => !commonHobby.includes(user)), getEdgeColor('state'));\n          // addEdges(commonWorkplace.filter(user => !commonHobby.includes(user)), getEdgeColor('workplace'));\n        } else if (filter === 'state') {\n          addEdgesToMe(commonState, getEdgeColor('state'));\n          //addEdges(commonHobby.filter(user => !commonState.includes(user)), getEdgeColor('hobby'));\n          //addEdges(commonWorkplace.filter(user => !commonState.includes(user)), getEdgeColor('workplace'));\n        } else if (filter === 'workplace') {\n          addEdgesToMe(commonWorkplace, getEdgeColor('workplace'));\n          //  addEdges(commonHobby.filter(user => !commonWorkplace.includes(user)), getEdgeColor('hobby'));\n          //  addEdges(commonState.filter(user => !commonWorkplace.includes(user)), getEdgeColor('state'));\n        }\n      }\n      const data = {\n        nodes,\n        edges\n      };\n      const options = getGraphOptions();\n      new Network(container, data, options);\n    };\n    renderGraph(users, filter);\n  }, [users, filter]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FilterButtons, {\n      setFilter: setFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"network-graph\",\n      className: \"w-full h-800 border-4 border-black\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphComponent, \"3lUk1T4eQr/j1P/EyG1/+CPoNek=\");\n_c = GraphComponent;\nexport default GraphComponent;\nvar _c;\n$RefreshReg$(_c, \"GraphComponent\");","map":{"version":3,"names":["React","useEffect","useState","DataSet","Network","getGraphOptions","getEdgeColor","getMe","getUsers","FilterButtons","Legend","jsxDEV","_jsxDEV","GraphComponent","_s","users","setUsers","filter","setFilter","userData","renderGraph","container","document","getElementById","classList","add","canvas","getElementsByTagName","style","height","me","classifyUsers","commonHobby","commonState","commonWorkplace","forEach","user","hobby","push","state","workplace","nodes","map","id","id_num","label","firstName","lastName","color","background","border","size","edges","connectEdge","user1","user2","from","to","inherit","opacity","addEdgeToMe","addEdgesToMe","console","log","data","options","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/WebCourse/WEB-Course/HW2/frontEnd/src/components/homePage/GraphComponent.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { DataSet, Network } from 'vis-network/standalone';\r\nimport { getGraphOptions, getEdgeColor, getMe, getUsers } from './Utilities';\r\nimport FilterButtons from './FilterButtons';\r\nimport Legend from './Legend';\r\n\r\nconst GraphComponent = () => {\r\n  const [users, setUsers] = useState([]);\r\n  const [filter, setFilter] = useState('all');\r\n\r\n  useEffect(() => {\r\n    const userData = getUsers();\r\n    setUsers(userData);\r\n  }, []); \r\n\r\n  useEffect(() => {\r\n    const renderGraph = (users, filter) => {\r\n      const container = document.getElementById('network-graph');\r\n      if (!container) return;\r\n\r\n      container.classList.add('border-2', 'border-black');\r\n      const canvas = container.getElementsByTagName('canvas')[0];\r\n      if (canvas) {\r\n        canvas.style.height = '800px';\r\n      }\r\n\r\n      const me = getMe()\r\n\r\n      const classifyUsers = (users) => {\r\n        const commonHobby = [];\r\n        const commonState = [];\r\n        const commonWorkplace = [];\r\n\r\n        users.forEach(user => {\r\n          if (user.hobby === me.hobby) commonHobby.push(user);\r\n          if (user.state === me.state) commonState.push(user);\r\n          if (user.workplace === me.workplace) commonWorkplace.push(user);\r\n        });\r\n\r\n        return { commonHobby, commonState, commonWorkplace };\r\n      };\r\n\r\n      const { commonHobby, commonState, commonWorkplace } = classifyUsers(users);\r\n\r\n\r\n        // Create nodes from the users.\r\n      const nodes = new DataSet([\r\n        ...users.map(user => ({\r\n          id: user.id_num,\r\n          label: `${user.firstName} ${user.lastName}`\r\n        })),\r\n        { id: me.id_num, label: 'Me', color: { background: 'red', border: 'black' }, size: 30 } // Add Me as node.\r\n      ]);\r\n\r\n      const edges = new DataSet();\r\n\r\n      const connectEdge = (user1, user2, color) => {\r\n        edges.add({ from: user1.id_num, to: user2.id_num, color: { color, inherit: false, opacity: 1.5 } });\r\n      };\r\n\r\n\r\n\r\n      const addEdgeToMe = (user, color) => {\r\n        connectEdge(me, user, color)\r\n      }\r\n\r\n      const addEdgesToMe = (users, color) => {\r\n        users.forEach(user => {\r\n          addEdgeToMe(user, color)\r\n        });\r\n      };\r\n\r\n      if (filter === 'all') {\r\n        console.log(commonHobby)\r\n        console.log(commonState)\r\n        console.log(commonWorkplace)\r\n        console.log(edges)\r\n        // Connect \"Me\" to all common attributes\r\n        addEdgesToMe(commonHobby, getEdgeColor('hobby'));\r\n        addEdgesToMe(commonState, getEdgeColor('state'));\r\n        addEdgesToMe(commonWorkplace, getEdgeColor('workplace'));\r\n      } else {\r\n        if (filter === 'hobby') {\r\n          addEdgesToMe(commonHobby, getEdgeColor('hobby'));\r\n         // addEdges(commonState.filter(user => !commonHobby.includes(user)), getEdgeColor('state'));\r\n         // addEdges(commonWorkplace.filter(user => !commonHobby.includes(user)), getEdgeColor('workplace'));\r\n        } else if (filter === 'state') {\r\n          addEdgesToMe(commonState, getEdgeColor('state'));\r\n          //addEdges(commonHobby.filter(user => !commonState.includes(user)), getEdgeColor('hobby'));\r\n         //addEdges(commonWorkplace.filter(user => !commonState.includes(user)), getEdgeColor('workplace'));\r\n        } else if (filter === 'workplace') {\r\n          addEdgesToMe(commonWorkplace, getEdgeColor('workplace'));\r\n        //  addEdges(commonHobby.filter(user => !commonWorkplace.includes(user)), getEdgeColor('hobby'));\r\n        //  addEdges(commonState.filter(user => !commonWorkplace.includes(user)), getEdgeColor('state'));\r\n        }\r\n      }\r\n\r\n      const data = { nodes, edges };\r\n      const options = getGraphOptions();\r\n      new Network(container, data, options);\r\n    };\r\n\r\n    renderGraph(users, filter);\r\n  }, [users, filter]);\r\n\r\n  return (\r\n    <div>\r\n      <FilterButtons setFilter={setFilter} />\r\n      <div id=\"network-graph\" className=\"w-full h-800 border-4 border-black\"></div>\r\n      <Legend />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}