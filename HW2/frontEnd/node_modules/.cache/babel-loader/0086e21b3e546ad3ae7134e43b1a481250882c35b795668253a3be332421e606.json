{"ast":null,"code":"var _jsxFileName = \"C:\\\\WebCourse\\\\WEB-Course\\\\HW2\\\\frontEnd\\\\src\\\\components\\\\homePage\\\\GraphComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { DataSet, Network } from 'vis-network/standalone';\nimport { getGraphOptions, getEdgeColor, getMe, getUsers } from './Utilities';\nimport FilterButtons from './FilterButtons';\nimport Legend from './Legend';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [filter, setFilter] = useState('all');\n  useEffect(() => {\n    const userData = getUsers();\n    console.log(\"Fetched users:\", userData); // Log fetched users\n    setUsers(userData);\n  }, []);\n  useEffect(() => {\n    const renderGraph = (users, filter) => {\n      const container = document.getElementById('network-graph');\n      if (!container) return;\n      container.classList.add('border-2', 'border-black');\n      const canvas = container.getElementsByTagName('canvas')[0];\n      if (canvas) {\n        canvas.style.height = '800px';\n      }\n      const me = getMe();\n      console.log(\"Current user (me):\", me); // Log the current user\n\n      const classifyUsers = users => {\n        console.log(\"Classifying users:\", users); // Log users to be classified\n        const commonAttributes = ['hobby', 'state', 'workplace'];\n        const attributeDict = {};\n\n        // Initialize dictionary with attributes as keys and empty arrays as values\n        commonAttributes.forEach(attr => {\n          attributeDict[attr] = {};\n        });\n\n        // Classify users based on common attributes\n        users.forEach(user => {\n          commonAttributes.forEach(attr => {\n            const userAttributeValue = user[attr];\n            if (userAttributeValue) {\n              if (!attributeDict[attr][userAttributeValue]) {\n                attributeDict[attr][userAttributeValue] = [];\n              }\n              attributeDict[attr][userAttributeValue].push(user);\n            }\n          });\n        });\n        return attributeDict;\n      };\n      const classifiedUsers = classifyUsers(users);\n      console.log(\"Classified users:\", classifiedUsers); // Log the classified users\n\n      const connectEdge = (user1, user2, color) => {\n        edges.add({\n          from: user1.id_num,\n          to: user2.id_num,\n          color: {\n            color,\n            inherit: false,\n            opacity: 2\n          }\n        });\n      };\n      const addEdgesToMe = (users, color) => {\n        if (!users) return;\n        users.forEach(user => {\n          connectEdge(me, user, color);\n        });\n      };\n\n      // Create nodes from the users.\n      const createNodes = () => {\n        return new DataSet([...users.map(user => ({\n          id: user.id_num,\n          label: `${user.firstName} ${user.lastName}`\n        })), {\n          id: me.id_num,\n          label: 'Me',\n          color: {\n            background: 'red',\n            border: 'black'\n          },\n          size: 30\n        } // Add Me as node.\n        ]);\n      };\n      const classifyMyUsers = classifiedUsers => {\n        const commonHobby = classifiedUsers['hobby'][me.hobby];\n        const commonState = classifiedUsers['state'][me.state];\n        const commonWorkplace = classifiedUsers['workplace'][me.workplace];\n        return {\n          commonHobby,\n          commonState,\n          commonWorkplace\n        };\n      };\n      const {\n        commonHobby,\n        commonState,\n        commonWorkplace\n      } = classifyMyUsers(classifiedUsers);\n      console.log(\"Common hobby users:\", commonHobby);\n      console.log(\"Common state users:\", commonState);\n      console.log(\"Common workplace users:\", commonWorkplace);\n      const nodes = createNodes();\n      const edges = new DataSet();\n      if (filter === 'all') {\n        // Connect \"Me\" to all common attributes\n        addEdgesToMe(commonHobby, getEdgeColor('hobby'));\n        addEdgesToMe(commonState, getEdgeColor('state'));\n        addEdgesToMe(commonWorkplace, getEdgeColor('workplace'));\n      } else {\n        if (filter === 'hobby') {\n          addEdgesToMe(commonHobby, getEdgeColor('hobby'));\n        } else if (filter === 'state') {\n          addEdgesToMe(commonState, getEdgeColor('state'));\n        } else if (filter === 'workplace') {\n          addEdgesToMe(commonWorkplace, getEdgeColor('workplace'));\n        }\n      }\n      const data = {\n        nodes,\n        edges\n      };\n      const options = getGraphOptions();\n      new Network(container, data, options);\n    };\n    renderGraph(users, filter);\n  }, [users, filter]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FilterButtons, {\n      setFilter: setFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"network-graph\",\n      className: \"w-full h-800 border-4 border-black\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphComponent, \"3lUk1T4eQr/j1P/EyG1/+CPoNek=\");\n_c = GraphComponent;\nexport default GraphComponent;\nvar _c;\n$RefreshReg$(_c, \"GraphComponent\");","map":{"version":3,"names":["React","useEffect","useState","DataSet","Network","getGraphOptions","getEdgeColor","getMe","getUsers","FilterButtons","Legend","jsxDEV","_jsxDEV","GraphComponent","_s","users","setUsers","filter","setFilter","userData","console","log","renderGraph","container","document","getElementById","classList","add","canvas","getElementsByTagName","style","height","me","classifyUsers","commonAttributes","attributeDict","forEach","attr","user","userAttributeValue","push","classifiedUsers","connectEdge","user1","user2","color","edges","from","id_num","to","inherit","opacity","addEdgesToMe","createNodes","map","id","label","firstName","lastName","background","border","size","classifyMyUsers","commonHobby","hobby","commonState","state","commonWorkplace","workplace","nodes","data","options","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/WebCourse/WEB-Course/HW2/frontEnd/src/components/homePage/GraphComponent.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { DataSet, Network } from 'vis-network/standalone';\r\nimport { getGraphOptions, getEdgeColor, getMe, getUsers } from './Utilities';\r\nimport FilterButtons from './FilterButtons';\r\nimport Legend from './Legend';\r\n\r\nconst GraphComponent = () => {\r\n  const [users, setUsers] = useState([]);\r\n  const [filter, setFilter] = useState('all');\r\n\r\n  useEffect(() => {\r\n    const userData = getUsers();\r\n    console.log(\"Fetched users:\", userData); // Log fetched users\r\n    setUsers(userData);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const renderGraph = (users, filter) => {\r\n      const container = document.getElementById('network-graph');\r\n      if (!container) return;\r\n\r\n      container.classList.add('border-2', 'border-black');\r\n      const canvas = container.getElementsByTagName('canvas')[0];\r\n      if (canvas) {\r\n        canvas.style.height = '800px';\r\n      }\r\n\r\n      const me = getMe();\r\n      console.log(\"Current user (me):\", me); // Log the current user\r\n\r\n      const classifyUsers = (users) => {\r\n        console.log(\"Classifying users:\", users); // Log users to be classified\r\n        const commonAttributes = ['hobby', 'state', 'workplace'];\r\n        const attributeDict = {};\r\n\r\n        // Initialize dictionary with attributes as keys and empty arrays as values\r\n        commonAttributes.forEach(attr => {\r\n          attributeDict[attr] = {};\r\n        });\r\n\r\n        // Classify users based on common attributes\r\n        users.forEach(user => {\r\n          commonAttributes.forEach(attr => {\r\n            const userAttributeValue = user[attr];\r\n            if (userAttributeValue) {\r\n              if (!attributeDict[attr][userAttributeValue]) {\r\n                attributeDict[attr][userAttributeValue] = [];\r\n              }\r\n              attributeDict[attr][userAttributeValue].push(user);\r\n            }\r\n          });\r\n        });\r\n\r\n        return attributeDict;\r\n      };\r\n\r\n      const classifiedUsers = classifyUsers(users);\r\n      console.log(\"Classified users:\", classifiedUsers); // Log the classified users\r\n\r\n      const connectEdge = (user1, user2, color) => {\r\n        edges.add({ from: user1.id_num, to: user2.id_num, color: { color, inherit: false, opacity: 2 } });\r\n      };\r\n\r\n      const addEdgesToMe = (users, color) => {\r\n        if (!users) return;\r\n        users.forEach(user => {\r\n          connectEdge(me, user, color);\r\n        });\r\n      };\r\n\r\n      // Create nodes from the users.\r\n      const createNodes = () => {\r\n        return new DataSet([\r\n          ...users.map(user => ({\r\n            id: user.id_num,\r\n            label: `${user.firstName} ${user.lastName}`\r\n          })),\r\n          { id: me.id_num, label: 'Me', color: { background: 'red', border: 'black' }, size: 30 } // Add Me as node.\r\n        ]);\r\n      };\r\n\r\n      const classifyMyUsers = (classifiedUsers) => {\r\n        const commonHobby = classifiedUsers['hobby'][me.hobby];\r\n        const commonState = classifiedUsers['state'][me.state];\r\n        const commonWorkplace = classifiedUsers['workplace'][me.workplace];\r\n\r\n        return { commonHobby, commonState, commonWorkplace };\r\n      };\r\n\r\n      const { commonHobby, commonState, commonWorkplace } = classifyMyUsers(classifiedUsers);\r\n      console.log(\"Common hobby users:\", commonHobby);\r\n      console.log(\"Common state users:\", commonState);\r\n      console.log(\"Common workplace users:\", commonWorkplace);\r\n\r\n      const nodes = createNodes();\r\n      const edges = new DataSet();\r\n\r\n      if (filter === 'all') {\r\n        // Connect \"Me\" to all common attributes\r\n        addEdgesToMe(commonHobby, getEdgeColor('hobby'));\r\n        addEdgesToMe(commonState, getEdgeColor('state'));\r\n        addEdgesToMe(commonWorkplace, getEdgeColor('workplace'));\r\n      } else {\r\n        if (filter === 'hobby') {\r\n          addEdgesToMe(commonHobby, getEdgeColor('hobby'));\r\n        } else if (filter === 'state') {\r\n          addEdgesToMe(commonState, getEdgeColor('state'));\r\n        } else if (filter === 'workplace') {\r\n          addEdgesToMe(commonWorkplace, getEdgeColor('workplace'));\r\n        }\r\n      }\r\n\r\n      const data = { nodes, edges };\r\n      const options = getGraphOptions();\r\n      new Network(container, data, options);\r\n    };\r\n\r\n    renderGraph(users, filter);\r\n  }, [users, filter]);\r\n\r\n  return (\r\n    <div>\r\n      <FilterButtons setFilter={setFilter} />\r\n      <div id=\"network-graph\" className=\"w-full h-800 border-4 border-black\"></div>\r\n      <Legend />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,OAAO,EAAEC,OAAO,QAAQ,wBAAwB;AACzD,SAASC,eAAe,EAAEC,YAAY,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,aAAa;AAC5E,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACe,MAAM,EAAEC,SAAS,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAE3CD,SAAS,CAAC,MAAM;IACd,MAAMkB,QAAQ,GAAGX,QAAQ,CAAC,CAAC;IAC3BY,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,QAAQ,CAAC,CAAC,CAAC;IACzCH,QAAQ,CAACG,QAAQ,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAENlB,SAAS,CAAC,MAAM;IACd,MAAMqB,WAAW,GAAGA,CAACP,KAAK,EAAEE,MAAM,KAAK;MACrC,MAAMM,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,eAAe,CAAC;MAC1D,IAAI,CAACF,SAAS,EAAE;MAEhBA,SAAS,CAACG,SAAS,CAACC,GAAG,CAAC,UAAU,EAAE,cAAc,CAAC;MACnD,MAAMC,MAAM,GAAGL,SAAS,CAACM,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;MAC1D,IAAID,MAAM,EAAE;QACVA,MAAM,CAACE,KAAK,CAACC,MAAM,GAAG,OAAO;MAC/B;MAEA,MAAMC,EAAE,GAAGzB,KAAK,CAAC,CAAC;MAClBa,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEW,EAAE,CAAC,CAAC,CAAC;;MAEvC,MAAMC,aAAa,GAAIlB,KAAK,IAAK;QAC/BK,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEN,KAAK,CAAC,CAAC,CAAC;QAC1C,MAAMmB,gBAAgB,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,WAAW,CAAC;QACxD,MAAMC,aAAa,GAAG,CAAC,CAAC;;QAExB;QACAD,gBAAgB,CAACE,OAAO,CAACC,IAAI,IAAI;UAC/BF,aAAa,CAACE,IAAI,CAAC,GAAG,CAAC,CAAC;QAC1B,CAAC,CAAC;;QAEF;QACAtB,KAAK,CAACqB,OAAO,CAACE,IAAI,IAAI;UACpBJ,gBAAgB,CAACE,OAAO,CAACC,IAAI,IAAI;YAC/B,MAAME,kBAAkB,GAAGD,IAAI,CAACD,IAAI,CAAC;YACrC,IAAIE,kBAAkB,EAAE;cACtB,IAAI,CAACJ,aAAa,CAACE,IAAI,CAAC,CAACE,kBAAkB,CAAC,EAAE;gBAC5CJ,aAAa,CAACE,IAAI,CAAC,CAACE,kBAAkB,CAAC,GAAG,EAAE;cAC9C;cACAJ,aAAa,CAACE,IAAI,CAAC,CAACE,kBAAkB,CAAC,CAACC,IAAI,CAACF,IAAI,CAAC;YACpD;UACF,CAAC,CAAC;QACJ,CAAC,CAAC;QAEF,OAAOH,aAAa;MACtB,CAAC;MAED,MAAMM,eAAe,GAAGR,aAAa,CAAClB,KAAK,CAAC;MAC5CK,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEoB,eAAe,CAAC,CAAC,CAAC;;MAEnD,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,KAAK,EAAEC,KAAK,KAAK;QAC3CC,KAAK,CAACnB,GAAG,CAAC;UAAEoB,IAAI,EAAEJ,KAAK,CAACK,MAAM;UAAEC,EAAE,EAAEL,KAAK,CAACI,MAAM;UAAEH,KAAK,EAAE;YAAEA,KAAK;YAAEK,OAAO,EAAE,KAAK;YAAEC,OAAO,EAAE;UAAE;QAAE,CAAC,CAAC;MACnG,CAAC;MAED,MAAMC,YAAY,GAAGA,CAACrC,KAAK,EAAE8B,KAAK,KAAK;QACrC,IAAI,CAAC9B,KAAK,EAAE;QACZA,KAAK,CAACqB,OAAO,CAACE,IAAI,IAAI;UACpBI,WAAW,CAACV,EAAE,EAAEM,IAAI,EAAEO,KAAK,CAAC;QAC9B,CAAC,CAAC;MACJ,CAAC;;MAED;MACA,MAAMQ,WAAW,GAAGA,CAAA,KAAM;QACxB,OAAO,IAAIlD,OAAO,CAAC,CACjB,GAAGY,KAAK,CAACuC,GAAG,CAAChB,IAAI,KAAK;UACpBiB,EAAE,EAAEjB,IAAI,CAACU,MAAM;UACfQ,KAAK,EAAE,GAAGlB,IAAI,CAACmB,SAAS,IAAInB,IAAI,CAACoB,QAAQ;QAC3C,CAAC,CAAC,CAAC,EACH;UAAEH,EAAE,EAAEvB,EAAE,CAACgB,MAAM;UAAEQ,KAAK,EAAE,IAAI;UAAEX,KAAK,EAAE;YAAEc,UAAU,EAAE,KAAK;YAAEC,MAAM,EAAE;UAAQ,CAAC;UAAEC,IAAI,EAAE;QAAG,CAAC,CAAC;QAAA,CACzF,CAAC;MACJ,CAAC;MAED,MAAMC,eAAe,GAAIrB,eAAe,IAAK;QAC3C,MAAMsB,WAAW,GAAGtB,eAAe,CAAC,OAAO,CAAC,CAACT,EAAE,CAACgC,KAAK,CAAC;QACtD,MAAMC,WAAW,GAAGxB,eAAe,CAAC,OAAO,CAAC,CAACT,EAAE,CAACkC,KAAK,CAAC;QACtD,MAAMC,eAAe,GAAG1B,eAAe,CAAC,WAAW,CAAC,CAACT,EAAE,CAACoC,SAAS,CAAC;QAElE,OAAO;UAAEL,WAAW;UAAEE,WAAW;UAAEE;QAAgB,CAAC;MACtD,CAAC;MAED,MAAM;QAAEJ,WAAW;QAAEE,WAAW;QAAEE;MAAgB,CAAC,GAAGL,eAAe,CAACrB,eAAe,CAAC;MACtFrB,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE0C,WAAW,CAAC;MAC/C3C,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE4C,WAAW,CAAC;MAC/C7C,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAE8C,eAAe,CAAC;MAEvD,MAAME,KAAK,GAAGhB,WAAW,CAAC,CAAC;MAC3B,MAAMP,KAAK,GAAG,IAAI3C,OAAO,CAAC,CAAC;MAE3B,IAAIc,MAAM,KAAK,KAAK,EAAE;QACpB;QACAmC,YAAY,CAACW,WAAW,EAAEzD,YAAY,CAAC,OAAO,CAAC,CAAC;QAChD8C,YAAY,CAACa,WAAW,EAAE3D,YAAY,CAAC,OAAO,CAAC,CAAC;QAChD8C,YAAY,CAACe,eAAe,EAAE7D,YAAY,CAAC,WAAW,CAAC,CAAC;MAC1D,CAAC,MAAM;QACL,IAAIW,MAAM,KAAK,OAAO,EAAE;UACtBmC,YAAY,CAACW,WAAW,EAAEzD,YAAY,CAAC,OAAO,CAAC,CAAC;QAClD,CAAC,MAAM,IAAIW,MAAM,KAAK,OAAO,EAAE;UAC7BmC,YAAY,CAACa,WAAW,EAAE3D,YAAY,CAAC,OAAO,CAAC,CAAC;QAClD,CAAC,MAAM,IAAIW,MAAM,KAAK,WAAW,EAAE;UACjCmC,YAAY,CAACe,eAAe,EAAE7D,YAAY,CAAC,WAAW,CAAC,CAAC;QAC1D;MACF;MAEA,MAAMgE,IAAI,GAAG;QAAED,KAAK;QAAEvB;MAAM,CAAC;MAC7B,MAAMyB,OAAO,GAAGlE,eAAe,CAAC,CAAC;MACjC,IAAID,OAAO,CAACmB,SAAS,EAAE+C,IAAI,EAAEC,OAAO,CAAC;IACvC,CAAC;IAEDjD,WAAW,CAACP,KAAK,EAAEE,MAAM,CAAC;EAC5B,CAAC,EAAE,CAACF,KAAK,EAAEE,MAAM,CAAC,CAAC;EAEnB,oBACEL,OAAA;IAAA4D,QAAA,gBACE5D,OAAA,CAACH,aAAa;MAACS,SAAS,EAAEA;IAAU;MAAAuD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACvChE,OAAA;MAAK2C,EAAE,EAAC,eAAe;MAACsB,SAAS,EAAC;IAAoC;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC7EhE,OAAA,CAACF,MAAM;MAAA+D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEV,CAAC;AAAC9D,EAAA,CAzHID,cAAc;AAAAiE,EAAA,GAAdjE,cAAc;AA2HpB,eAAeA,cAAc;AAAC,IAAAiE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}