{"ast":null,"code":"var _jsxFileName = \"C:\\\\WebCourse\\\\WEB-Course\\\\HW2\\\\frontEnd\\\\src\\\\components\\\\homePage\\\\GraphComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { DataSet, Network } from 'vis-network/standalone';\nimport { getGraphOptions, getEdgeColor, getMe, getUsers } from './Utilities';\nimport FilterButtons from './FilterButtons';\nimport Legend from './Legend';\nimport { classifyUsers, classifyMyUsers } from './users';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [filter, setFilter] = useState('all');\n  useEffect(() => {\n    const userData = getUsers();\n    console.log(\"Fetched users:\", userData); // Log fetched users\n    setUsers(userData);\n  }, []);\n  useEffect(() => {\n    const renderGraph = (users, filter) => {\n      const container = document.getElementById('network-graph');\n      if (!container) return;\n      container.classList.add('border-2', 'border-black');\n      const canvas = container.getElementsByTagName('canvas')[0];\n      if (canvas) {\n        canvas.style.height = '800px';\n      }\n      const me = getMe();\n      const classifiedUsers = classifyUsers(users);\n      const connectEdge = (user1, user2, color) => {\n        edges.add({\n          from: user1.id_num,\n          to: user2.id_num,\n          color: {\n            color,\n            inherit: false,\n            opacity: 2\n          }\n        });\n      };\n      const addEdgesToMe = (users, color) => {\n        if (!users) return;\n        users.forEach(user => {\n          connectEdge(me, user, color);\n        });\n      };\n\n      // Create nodes from the users.\n      const createNodes = () => {\n        return new DataSet([...users.map(user => ({\n          id: user.id_num,\n          label: `${user.firstName} ${user.lastName}`\n        })), {\n          id: me.id_num,\n          label: 'Me',\n          color: {\n            background: 'red',\n            border: 'black'\n          },\n          size: 30\n        } // Add Me as node.\n        ]);\n      };\n      const {\n        commonHobby,\n        commonState,\n        commonWorkplace\n      } = classifyMyUsers(classifiedUsers);\n      console.log(\"Common hobby users:\", commonHobby);\n      console.log(\"Common state users:\", commonState);\n      console.log(\"Common workplace users:\", commonWorkplace);\n      const nodes = createNodes();\n      const edges = new DataSet();\n      if (filter === 'all') {\n        // Connect \"Me\" to all common attributes\n        addEdgesToMe(commonHobby, getEdgeColor('hobby'));\n        addEdgesToMe(commonState, getEdgeColor('state'));\n        addEdgesToMe(commonWorkplace, getEdgeColor('workplace'));\n      } else {\n        if (filter === 'hobby') {\n          addEdgesToMe(commonHobby, getEdgeColor('hobby'));\n        } else if (filter === 'state') {\n          addEdgesToMe(commonState, getEdgeColor('state'));\n        } else if (filter === 'workplace') {\n          addEdgesToMe(commonWorkplace, getEdgeColor('workplace'));\n        }\n      }\n      const data = {\n        nodes,\n        edges\n      };\n      const options = getGraphOptions();\n      new Network(container, data, options);\n    };\n    renderGraph(users, filter);\n  }, [users, filter]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FilterButtons, {\n      setFilter: setFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"network-graph\",\n      className: \"w-full h-800 border-4 border-black\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphComponent, \"3lUk1T4eQr/j1P/EyG1/+CPoNek=\");\n_c = GraphComponent;\nexport default GraphComponent;\nvar _c;\n$RefreshReg$(_c, \"GraphComponent\");","map":{"version":3,"names":["React","useEffect","useState","DataSet","Network","getGraphOptions","getEdgeColor","getMe","getUsers","FilterButtons","Legend","classifyUsers","classifyMyUsers","jsxDEV","_jsxDEV","GraphComponent","_s","users","setUsers","filter","setFilter","userData","console","log","renderGraph","container","document","getElementById","classList","add","canvas","getElementsByTagName","style","height","me","classifiedUsers","connectEdge","user1","user2","color","edges","from","id_num","to","inherit","opacity","addEdgesToMe","forEach","user","createNodes","map","id","label","firstName","lastName","background","border","size","commonHobby","commonState","commonWorkplace","nodes","data","options","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/WebCourse/WEB-Course/HW2/frontEnd/src/components/homePage/GraphComponent.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { DataSet, Network } from 'vis-network/standalone';\r\nimport { getGraphOptions, getEdgeColor, getMe, getUsers } from './Utilities';\r\nimport FilterButtons from './FilterButtons';\r\nimport Legend from './Legend';\r\nimport {classifyUsers, classifyMyUsers} from './users';\r\n\r\nconst GraphComponent = () => {\r\n  const [users, setUsers] = useState([]);\r\n  const [filter, setFilter] = useState('all');\r\n\r\n  useEffect(() => {\r\n    const userData = getUsers();\r\n    console.log(\"Fetched users:\", userData); // Log fetched users\r\n    setUsers(userData);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const renderGraph = (users, filter) => {\r\n      const container = document.getElementById('network-graph');\r\n      if (!container) return;\r\n\r\n      container.classList.add('border-2', 'border-black');\r\n      const canvas = container.getElementsByTagName('canvas')[0];\r\n      if (canvas) {\r\n        canvas.style.height = '800px';\r\n      }\r\n\r\n      const me = getMe();\r\n\r\n      const classifiedUsers = classifyUsers(users);\r\n\r\n      const connectEdge = (user1, user2, color) => {\r\n        edges.add({ from: user1.id_num, to: user2.id_num, color: { color, inherit: false, opacity: 2 } });\r\n      };\r\n\r\n      const addEdgesToMe = (users, color) => {\r\n        if (!users) return;\r\n        users.forEach(user => {\r\n          connectEdge(me, user, color);\r\n        });\r\n      };\r\n\r\n      // Create nodes from the users.\r\n      const createNodes = () => {\r\n        return new DataSet([\r\n          ...users.map(user => ({\r\n            id: user.id_num,\r\n            label: `${user.firstName} ${user.lastName}`\r\n          })),\r\n          { id: me.id_num, label: 'Me', color: { background: 'red', border: 'black' }, size: 30 } // Add Me as node.\r\n        ]);\r\n      };\r\n\r\n      const { commonHobby, commonState, commonWorkplace } = classifyMyUsers(classifiedUsers);\r\n      console.log(\"Common hobby users:\", commonHobby);\r\n      console.log(\"Common state users:\", commonState);\r\n      console.log(\"Common workplace users:\", commonWorkplace);\r\n\r\n      const nodes = createNodes();\r\n      const edges = new DataSet();\r\n\r\n      if (filter === 'all') {\r\n        // Connect \"Me\" to all common attributes\r\n        addEdgesToMe(commonHobby, getEdgeColor('hobby'));\r\n        addEdgesToMe(commonState, getEdgeColor('state'));\r\n        addEdgesToMe(commonWorkplace, getEdgeColor('workplace'));\r\n      } else {\r\n        if (filter === 'hobby') {\r\n          addEdgesToMe(commonHobby, getEdgeColor('hobby'));\r\n        } else if (filter === 'state') {\r\n          addEdgesToMe(commonState, getEdgeColor('state'));\r\n        } else if (filter === 'workplace') {\r\n          addEdgesToMe(commonWorkplace, getEdgeColor('workplace'));\r\n        }\r\n      }\r\n\r\n      const data = { nodes, edges };\r\n      const options = getGraphOptions();\r\n      new Network(container, data, options);\r\n    };\r\n\r\n    renderGraph(users, filter);\r\n  }, [users, filter]);\r\n\r\n  return (\r\n    <div>\r\n      <FilterButtons setFilter={setFilter} />\r\n      <div id=\"network-graph\" className=\"w-full h-800 border-4 border-black\"></div>\r\n      <Legend />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}